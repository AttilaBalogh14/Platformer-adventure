using UnityEngine;

public class BossDashAttack : BossAttackBase
{
    [Header("Dash Settings")]
    [SerializeField] private float dashSpeed = 12f;       // milyen gyorsan dash-el a boss
    [SerializeField] private float dashDuration = 0.4f;   // meddig tart a dash
    [SerializeField] private float dashCooldown = 2f;     // k√©t dash k√∂z√∂tt mennyi id≈ë teljen el
    [SerializeField] private AudioClip dashSound;         // opcion√°lis hang

    [Header("References")]
    [SerializeField] private Transform player;            // a player referenci√°ja
    [SerializeField] private Rigidbody2D rb;              // a boss rigidbody-ja

    private Animator anim;
    private bool isDashing = false;
    private float dashTimer = 0f;
    private float lastDashTime = -999f;

    private void Awake()
    {
        anim = GetComponentInParent<Animator>();
        if (rb == null)
            rb = GetComponentInParent<Rigidbody2D>();
    }

    public override void Execute(Transform playerTarget)
    {
        // üîπ Ha a dash tiltva, ne fusson
        BossMovement movement = GetComponentInParent<BossMovement>();
        if (movement != null && !movement.allowDash)
            return;

        if (Time.time < lastDashTime + dashCooldown || isDashing)
            return; // m√©g cooldown-on van

        player = playerTarget;

        // Anim√°ci√≥ trigger
        anim.SetTrigger("dashattack");

        // Hang lej√°tsz√°s (ha van)
        if (SoundManager.instance != null && dashSound != null)
            SoundManager.instance.PlaySound(dashSound);

        StartCoroutine(PerformDash());
    }


    private System.Collections.IEnumerator PerformDash()
    {
        isDashing = true;
        dashTimer = 0f;
        lastDashTime = Time.time;

        // Meghat√°rozzuk a mozg√°s ir√°ny√°t a j√°t√©kos fel√©
        Vector2 direction = Vector2.right; // alap√©rtelmezett jobbra
        if (player != null)
            direction = (player.position - rb.transform.position).normalized;

        // sprite flip-hez igaz√≠tjuk az ir√°nyt
        float facing = Mathf.Sign(direction.x);
        Vector3 localScale = rb.transform.localScale;
        localScale.x = Mathf.Abs(localScale.x) * facing;
        rb.transform.localScale = localScale;

        // Addig dash-el, am√≠g tart az id≈ë √©s nincs √ºtk√∂z√©s
        while (dashTimer < dashDuration && isDashing)
        {
            rb.velocity = new Vector2(direction.x * dashSpeed, rb.velocity.y);
            dashTimer += Time.deltaTime;
            yield return null;
        }

        // Dash v√©ge ‚Äî le√°ll√≠tjuk a mozg√°st
        rb.velocity = new Vector2(0, rb.velocity.y);
        isDashing = false;
    }

    // √útk√∂z√©s kezel√©se
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (!isDashing)
            return;

        // Ha fal vagy akad√°ly (pl. Layer alapj√°n), meg√°ll a dash
        // P√©lda: ha a fal Layer neve "Ground"
        if (collision.gameObject.layer == LayerMask.NameToLayer("Ground"))
        {
            isDashing = false;
            rb.velocity = new Vector2(0, rb.velocity.y);
        }
    }

    public override float GetHeuristicScore(Transform player, Transform boss)
    {
        float horizontalDist = Mathf.Abs(player.position.x - boss.position.x);
        if (horizontalDist < 4f) return 9f; // k√∂zelebb, nagyobb pont
        return 3f; // t√°vol kev√©sb√© hat√©kony
    }


}
